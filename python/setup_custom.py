import setuptools
from setuptools.command.build_ext import build_ext
import subprocess
import sys
import os
import platform

# --- Configuration ---
PKG_NAME = 'banbta'
GO_PACKAGES = {
    'ta': 'github.com/banbox/banta/python/ta',
    'tav': 'github.com/banbox/banta/python/tav'
}
# --- End Configuration ---

class BinaryDistribution(setuptools.Distribution):
    """
    This is a custom distribution class that tells setuptools that this is a
    binary distribution.
    """
    def has_ext_modules(self):
        return True

class CustomBuildExt(build_ext):
    """
    Custom build_ext command to compile the Go and C parts of the extension.
    """
    def run(self):
        # The gopy command in the workflow creates subdirectories for 'ta' and 'tav'
        # inside the 'banbta' package. It also generates a 'build.py' in each.
        # These build.py scripts are responsible for compiling the Go code.
        for mod_name in ['ta', 'tav']:
            mod_path = os.path.join('banbta', mod_name)
            build_script = os.path.join(mod_path, 'build.py')
            
            if not os.path.exists(build_script):
                raise FileNotFoundError(f"Build script not found: {build_script}")
            
            print(f"--- Running build script for {mod_name} module ---", flush=True)
            # The executable is the python that cibuildwheel is using for the build
            py_executable = sys.executable
            subprocess.check_call([py_executable, build_script])

        # After the Go libraries are built, proceed with the standard C extension build.
        super().run()

# --- Package Configuration ---

PKG_NAME = "banbta"
GO_MODULE_NAMES = ['ta', 'tav']
EXT_MODULES = []
PACKAGE_DATA = {}

# Define the C extension modules for setuptools.
# It will compile the .c files generated by gopy and link them against the Go shared libraries.
for mod_name in GO_MODULE_NAMES:
    package_name = f'{PKG_NAME}.{mod_name}'
    module_path = os.path.join(PKG_NAME, mod_name)
    
    ext = setuptools.Extension(
        name=f'{package_name}._{mod_name}',
        sources=[os.path.join(module_path, f'{mod_name}.c')],
        include_dirs=[module_path],
        library_dirs=[module_path],
        # The name of the go library is 'ta_go', etc. (without 'lib' prefix)
        libraries=[f'{mod_name}_go']
    )
    
    # Set rpath for Linux and macOS to find the Go shared library at runtime.
    if platform.system() == "Linux":
        ext.extra_link_args = ["-Wl,-rpath,$ORIGIN"]
    elif platform.system() == "Darwin":
        ext.extra_link_args = ["-Wl,-rpath,@loader_path"]
        
    EXT_MODULES.append(ext)
    
    # Specify which shared libraries to package with the wheel.
    lib_patterns = []
    if platform.system() == 'Windows':
        lib_patterns.append('*.dll')
    elif platform.system() == 'Darwin':
        lib_patterns.append('*.dylib')
    else:
        lib_patterns.append('*.so')
    
    PACKAGE_DATA[package_name] = lib_patterns


setuptools.setup(
    name=PKG_NAME,
    version="0.3.0",
    author="banbot",
    author_email="banbot@163.com",
    description="python bindings for banta",
    long_description=open("README.md", "r", encoding='utf-8').read(),
    long_description_content_type="text/markdown",
    url="https://github.com/banbox/banta",
    packages=setuptools.find_packages(),
    classifiers=[
        "Programming Language :: Python :: 3",
        "License :: OSI Approved :: BSD License",
        "Operating System :: OS Independent",
    ],
    distclass=BinaryDistribution,
    ext_modules=EXT_MODULES,
    cmdclass={'build_ext': CustomBuildExt},
    package_data=PACKAGE_DATA,
    zip_safe=False,
) 