import setuptools
from setuptools.command.build_ext import build_ext
import subprocess
import sys
import os
import platform

# --- Configuration ---
PKG_NAME = 'banbta'
GO_PACKAGES = {
    'ta': 'github.com/banbox/banta/python/ta',
    'tav': 'github.com/banbox/banta/python/tav'
}
# --- End Configuration ---

class BinaryDistribution(setuptools.Distribution):
    """
    This is a custom distribution class that tells setuptools that this is a
    binary distribution.
    """
    def has_ext_modules(self):
        return True

class CustomBuildExt(build_ext):
    """
    Custom build_ext command to compile the Go part of the extension.
    """
    def run(self):
        # The gopy command generates a single `build.py` at the package root,
        # which is responsible for compiling the Go code into a shared library.
        build_script = 'build.py'
        
        if not os.path.exists(build_script):
            raise FileNotFoundError(f"Build script not found: {build_script} in {os.getcwd()}")
        
        print(f"--- Running build script for {PKG_NAME} ---", flush=True)
        # The executable is the python that cibuildwheel is using for the build.
        # The gopy-generated build.py script builds the Go part of the extension.
        py_executable = sys.executable
        subprocess.check_call([py_executable, build_script])

        # After the Go libraries are built, proceed with the standard C extension build.
        # This will compile the C wrapper and link it against the Go library.
        super().run()

# --- Package Configuration ---

PKG_NAME = "banbta"
EXT_MODULES = []
PACKAGE_DATA = {}

# Define the C extension module for setuptools.
# It will compile the .c file generated by gopy and link it against the Go shared library.
# The gopy `build.py` script builds the Go shared library (e.g., libbanbta_go.so).
ext = setuptools.Extension(
    # The name of the extension is `<pkg>._<pkg>`
    name=f'{PKG_NAME}._{PKG_NAME}',
    # The C source file is at the root of the package.
    sources=[f'{PKG_NAME}.c'],
    # Include directories for C headers
    include_dirs=[PKG_NAME],
    # The Go shared lib is created in the root of the build dir (_out)
    library_dirs=['.'],
    # The library to link against is `banbta_go` (setuptools adds lib prefix)
    libraries=[f'{PKG_NAME}_go']
)
    
# Set rpath for Linux and macOS to find the Go shared library at runtime.
if platform.system() == "Linux":
    ext.extra_link_args = ["-Wl,-rpath,$ORIGIN"]
elif platform.system() == "Darwin":
    ext.extra_link_args = ["-Wl,-rpath,@loader_path"]
        
EXT_MODULES.append(ext)
    
# Specify which shared libraries to package with the wheel.
lib_patterns = []
if platform.system() == 'Windows':
    lib_patterns.append('*.dll')
elif platform.system() == 'Darwin':
    lib_patterns.append('*.dylib')
else:
    lib_patterns.append('*.so')
    
# Add the patterns to the main package's data, so the Go shared library is included.
PACKAGE_DATA[PKG_NAME] = lib_patterns


setuptools.setup(
    name=PKG_NAME,
    version="0.3.0",
    author="banbot",
    author_email="banbot@163.com",
    description="python bindings for banta",
    long_description=open("README.md", "r", encoding='utf-8').read(),
    long_description_content_type="text/markdown",
    url="https://github.com/banbox/banta",
    packages=setuptools.find_packages(),
    classifiers=[
        "Programming Language :: Python :: 3",
        "License :: OSI Approved :: BSD License",
        "Operating System :: OS Independent",
    ],
    distclass=BinaryDistribution,
    ext_modules=EXT_MODULES,
    cmdclass={'build_ext': CustomBuildExt},
    package_data=PACKAGE_DATA,
    zip_safe=False,
) 